title: Institutional Grammar 2.0 JSON Schema
description: >
  IG 2.0 schema (https://arxiv.org/abs/2008.08937) designed by students from the Faculty of
  Mathematics and Information Science of the Warsaw University of Technology.
  This schema is still a prototype and subject to unannounced change.
$schema: http://www.example.org/IG
$defs:
  # A logical operator with N operands
  LogicalOperator:
    type: string
    enum:
      - AND
      - OR
      - XOR

  # An abstract node in the IG tree        
  Node:
    type: object
    properties:
      value: { type: string }
      begin: { type: integer }
      length: { type: integer }

    # These are required for files exchanged between tools
    # For user display, some of these properties may be omitted
    required:
      - value
      - begin
      - length

  # Abstract type entailing:
  #  - RegulativeInstitutionalStatement
  #  - ConstitutiveInstitutionalStatement
  #  - InstitutionalStatementCombination
  AbstractInstitutionalStatement:
    type: object
    allOf:
      - $ref: '#/$defs/Node'
    properties:
      type:
        type: string
        enum:
          - institutionalStatement
          - statementOfFact
      inversion: { type: boolean }
      orElse: { $ref: '#/$defs/InstitutionalStatement' }
    required:
      - type
      - inversion

  # Any type of institutional statement
  InstitutionalStatement:
    oneOf:
      - $ref: '#/$defs/RegulativeInstitutionalStatement'
      - $ref: '#/$defs/ConstitutiveInstitutionalStatement'
      - $ref: '#/$defs/InstitutionalStatementCombination'

  RegulativeInstitutionalStatement:
    allOf:
      - $ref: '#/$defs/AbstractInstitutionalStatement'
    properties:
      attribute: { $ref: '#/$defs/ComponentWithProperties' }
      directObject: { $ref: '#/$defs/ComponentWithProperties' }
      indirectObject: { $ref: '#/$defs/ComponentWithProperties' }
      deontic: { $ref: '#/$defs/ComponentWithoutProperties' }
      aim: { $ref: '#/$defs/ComponentWithoutProperties' }
      activationCondition: { $ref: '#/$defs/ComponentWithoutProperties' }
      executionConstraint: { $ref: '#/$defs/ComponentWithoutProperties' }
    required:
      - attribute
      - aim
    additionalProperties: false

  ConstitutiveInstitutionalStatement:
    allOf:
      - $ref: '#/$defs/AbstractInstitutionalStatement'
    properties:
      constitutedEntity: { $ref: '#/$defs/ComponentWithProperties' }
      deontic: { $ref: '#/$defs/ComponentWithoutProperties' }
      constitutiveFunction: { $ref: '#/$defs/ComponentWithoutProperties' }
      constitutingProperties: { $ref: '#/$defs/ComponentWithProperties' }
      activationCondition: { $ref: '#/$defs/ComponentWithoutProperties' }
      executionConstraint: { $ref: '#/$defs/ComponentWithoutProperties' }
    required:
      - constitutedEntity
      - constitutiveFunction
    additionalProperties: false
  
  # Logical combination of statements
  InstitutionalStatementCombination:
    allOf:
      - $ref: '#/$defs/AbstractInstitutionalStatement'
    properties:
      logicalOperator: { $ref: '#/$defs/LogicalOperator' }
      statements:
        type: array
        items: { $ref: '#/$defs/InstitutionalStatement' }
        minItems: 2
    additionalProperties: false
    required:
      - logicalOperator
      - statements
      
  # Represents statement components that cannot have properties
  ComponentWithoutProperties:
    type: object
    additionalProperties: false
    oneOf:
      - $ref: '#/$defs/Node' # plain node
      - $ref: '#/$defs/InstitutionalStatement' # nested statement
      - properties: # logical combination
          logicalOperator: { $ref: '#/$defs/LogicalOperator' }
          components:
            type: array
            items: { $ref: '#/$defs/ComponentWithoutProperties' }
            minItems: 2
        required:
          - logicalOperator
          - components

  # Represents:
  #   - Attribute
  #   - Object
  #   - ConstitutedEntity
  #   - Property
  # Can be a:
  #   - simple node
  #   - node with properties
  #   - nested institutional statement
  #   - logical combination of the above
  ComponentWithProperties:
    type: object
    additionalProperties: false
    oneOf:
      - $ref: '#/$defs/Node' # plain node
      - $ref: '#/$defs/InstitutionalStatement' # nested statement
      - $ref: '#/$defs/ComponentWithPropertiesCombination' # logical combination
      - properties: # node with loosely-attached properties
          element: { $ref: '#/$defs/Node' }
          properties:
            type: array
            items: { $ref: '#/$defs/ComponentWithProperties' }
        required:
          - element
          - properties # if properties are not defined, just use a plain node
                
  # A logical combination of components with properties
  ComponentWithPropertiesCombination:
    type: object
    additionalProperties: false
    properties: 
      logicalOperator: { $ref: '#/$defs/LogicalOperator' }
      components:
        type: array
        items: { $ref: '#/$defs/ComponentWithProperties' }
        minItems: 2
    required:
      - logicalOperator
      - components


# TODO: add metadata fields? Dublin Core maybe?
# Root element
type: object
properties:
  content: { type: string }
  statements:
    type: array
    items: { $ref: '#/$defs/InstitutionalStatement' }
additionalProperties: false
